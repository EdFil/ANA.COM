<?xml version="1.0" encoding="UTF-8"?>
<project name="anacom" default="compile" basedir=".">
	<description>Anacom with JBoss web services</description>

	<!-- Read environment properties first -->
	<property environment="env" />
	<!-- Override default property values with an external properties file, 
		if present, with the user's machine specific configuration. -->
	<property file="${user.home}/build.properties" />
	<!-- Then read the default configuration properties -->
	<property file="build.properties" />

	<property name="application.name" value="${ant.project.name}" />
	<property name="javac.encoding" value="UTF-8" />
	<property name="java.file.encoding" value="UTF-8" />

	<!-- Main directories -->
	<property name="src.rel-dir" value="src/main" />
	<property name="test.src.rel-dir" value="src/test" />
	<property name="build.rel-dir" value="build" />
	<property name="lib.rel-dir" value="../lib" />
	<property name="libsuddi.rel-dir" value="../libs-uddi"/>
	<property name="dist.rel-dir" value="build" />
	<property name="eclipse.build.rel-dir" value="bin" />
	<property name="tmp.rel-dir" value="/tmp" />

	<property name="project.name" value="anacom" />

	<!-- Directories with the source, e.g. java, dml, webapps -->
	<property name="java.src.rel-dir" value="${src.rel-dir}/java" />
	<property name="java.test.src.rel-dir" value="src/test/java" />
	<property name="dml.src.rel-dir" value="${src.rel-dir}/dml" />
	<property name="config.src.rel-dir" value="${src.rel-dir}/config" />
	<property name="webps.src.rel-dir" value="${src.rel-dir}/webps" />
	<property name="webas.src.rel-dir" value="${src.rel-dir}/webas" />

	<!-- JBoss references -->
	<!-- <property name="jboss.home" value="${env.JBOSS_HOME}" /> -->
	<property name="jboss.temp.rel-dir" value="${tmp.rel-dir}" />
	<property name="db.rel-dir" value="${tmp.rel-dir}/db" />
	<property name="db-optimus.rel-dir" value="${tmp.rel-dir}/dbOptimus" />
	<property name="db-tmn.rel-dir" value="${tmp.rel-dir}/dbTMN" />
	<property name="db-vodafone.rel-dir" value="${tmp.rel-dir}/dbVodafone" />
	<property name="test-db.rel-dir" value="test-db" />

	<!-- WSDL References -->
	<property name="stubs.package" value="pt.ist.anacom.shared.stubs" />
	<property name="project.localwsdl" value="${webas.src.rel-dir}/${application.name}.wsdl" />

	<!-- DML files -->
	<property name="dml.filename" value="${application.name}.dml" />
	<property name="dml.rel-file" value="${dml.src.rel-dir}/${dml.filename}" />

	<!-- Directories with generated source -->
	<property name="generated-src.build.rel-dir" value="${build.rel-dir}/src" />

	<!-- Directories with the .class, .e.g used to build the wars -->
	<property name="classes.build.rel-dir" value="${build.rel-dir}/war/WEB-INF/classes" />

	<!-- War distribution -->
	<property name="war-es.target.rel-dir" value="${build.rel-dir}/war-es" />
	<property name="war-es.filename" value="${application.name}-es.war" />

	<property name="dist.rel-dir" value="dist" />
	<property name="dist.as.warfile" value="${dist.rel-dir}/${application.name}-as.war" />
	<property name="dist.ps.warfile" value="${dist.rel-dir}/${application.name}-ps.war" />

	<!-- Deploy directories -->
	<property name="deploy.dir" value="${jboss.home}/standalone/deployments" />

	<!-- GWT SDK -->
	<!-- property name="gwt.sdk.home" at build.properties -->
	<!-- <property name="gwt.sdk.home" value="/home/alex/eclipse/plugins/com.google.gwt.eclipse.sdkbundle_2.4.0.v201203300216-rel-r37/gwt-2.4.0" 
		/> -->
	<property name="gwt.war.rel-dir" value="${build.rel-dir}/war" />
	<property name="gwt.war.classes.rel-dir" value="${gwt.war.rel-dir}/WEB-INF/classes" />
	<property name="gwt.war.lib.rel-dir" value="${gwt.war.rel-dir}/WEB-INF/lib" />
	<!-- Arguments to gwtc and devmode targets -->
	<property name="gwt.args" value="" />

	<path id="project.classpath">
		<pathelement location="${classes.build.rel-dir}" />
		<fileset dir="${gwt.sdk.home}">
			<include name="**/*.jar" />
		</fileset>
		<!-- SD -->
		<fileset dir="${jboss.home}/modules">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${lib.rel-dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="ws-stubs.classpath">
		<!-- SD -->
		<fileset dir="${jboss.home}/modules">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${lib.rel-dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<taskdef resource="pt/ist/fenixframework/dml-ant.xml" classpathref="project.classpath" />

	<target name="prepare">
		<echo message="Preparing the project for build..." />
		<mkdir dir="${classes.build.rel-dir}" />
		<mkdir dir="${db.rel-dir}" />
		<mkdir dir="${test-db.rel-dir}" />
		<copy file="${dml.rel-file}" todir="${jboss.temp.rel-dir}" />
		<copy todir="${gwt.war.rel-dir}">
			<fileset dir="." includes="**/*.dml" />
		</copy>
	</target>

	<target name="generate-domain" depends="prepare">
		<echo message="Generating base domain classes..." />
		<echo message="Using: ${dml.rel-file}" />
		<dml-domain-generator destDirectory="${java.src.rel-dir}" destDirectoryBase="${generated-src.build.rel-dir}">
			<fileset file="${dml.rel-file}" />
		</dml-domain-generator>
	</target>

	<target name="compile-domain" depends="generate-domain, generate-ws-stubs">
		<echo message="Compiling sources..." />
		<javac destdir="${classes.build.rel-dir}" debug="true" debuglevel="lines,vars,source" optimize="true" deprecation="true" verbose="false" includeantruntime="false">
			<classpath refid="project.classpath" />
			<src>
				<pathelement path="${generated-src.build.rel-dir}:${java.src.rel-dir}" />
			</src>
			<compilerarg line="" />
		</javac>
	</target>

	<target name="instrument-classes" depends="">
		<echo message="Injecting FenixFramework Voodoo Magic..." />
		<dml-post-processor dir="${classes.build.rel-dir}">
			<fileset file="${dml.rel-file}" />
			<classpath refid="project.classpath" />
		</dml-post-processor>
	</target>

	<target name="compile" depends="compile-domain, instrument-classes" description="Compiles the project">
		<copy todir="${gwt.war.rel-dir}">
			<fileset dir="${webps.src.rel-dir}" />
		</copy>
		<copy todir="${gwt.war.lib.rel-dir}">
			<fileset dir="${lib.rel-dir}" />
		</copy>
		<copy todir="${gwt.war.lib.rel-dir}" flatten="yes">
			<fileset dir="${gwt.sdk.home}" includes="gwt-servlet.jar" />
		</copy>
	</target>


	<target name="compile-tests" depends="compile" description="Compile the tests">
		<javac destdir="${classes.build.rel-dir}" debug="true" debuglevel="lines,vars,source" optimize="true" deprecation="true" verbose="false" includeantruntime="false" encoding="${javac.encoding}">
			<classpath refid="project.classpath" />
			<src>
				<pathelement path="${java.test.src.rel-dir}" />
			</src>
		</javac>
	</target>

	<!-- SD -->
	<target name="generate-ws-stubs" depends="prepare" description="Generate Web Service Java code from local WSDL, for the server">
		<taskdef name="wsconsume" classname="org.jboss.ws.tools.ant.WSConsumeTask">
			<classpath>
				<path refid="ws-stubs.classpath" />
			</classpath>
		</taskdef>

		<echo message="Executing wsconsume to generate server-side code..." />
		<echo message="WSDL: ${project.localwsdl}" />
		<wsconsume fork="false" verbose="true" destdir="${classes.build.rel-dir}" sourcedestdir="${generated-src.build.rel-dir}" package="${stubs.package}" keep="true" wsdl="${project.localwsdl}" />
	</target>

	<target name="copy-web-xml" depends="" description="copy web.xml to its location">
		<copy overwrite="true" tofile="${webas.src.rel-dir}/WEB-INF/web.xml" file="${webas.src.rel-dir}/WEB-INF/${project.name}.xml" />
	</target>

	<!-- Application Server -->
	<target name="war-as-sd" depends="copy-web-xml" description="Create the web service distribution archive">
		<war warfile="${dist.rel-dir}/${project.name}.war" webxml="${webas.src.rel-dir}/WEB-INF/web.xml">
			<classes dir="${classes.build.rel-dir}" />
			<tarfileset dir="${webas.src.rel-dir}">
				<include name="*.wsdl" />
			</tarfileset>
			<tarfileset dir="${webas.src.rel-dir}" prefix="WEB-INF/classes">
				<include name="uddi.xml"/>
			</tarfileset>
			<tarfileset dir="${libsuddi.rel-dir}" prefix="WEB-INF/lib">
				<include name="**.jar"/>
			</tarfileset>
			<tarfileset dir="${lib.rel-dir}" prefix="WEB-INF/lib">
				<include name="**.jar" />
			</tarfileset>
		</war>
	</target>

	<!-- Deploy Application Server -->
	<target name="deploy-as-sd" depends="war-as-sd" description="Deploy web service to JBoss AS">
		<fail unless="jboss.home">project.jboss.home not set</fail>
		<copy todir="${deploy.dir}" file="${dist.rel-dir}/${project.name}.war" />
	</target>

	<target name="deploy-optimus" depends="">
		<antcall target="deploy-as-sd">
			<param name="project.name" value="93" />
		</antcall>
	</target>

	<target name="deploy-tmn" depends="">
		<antcall target="deploy-as-sd">
			<param name="project.name" value="96" />
		</antcall>
	</target>

	<target name="deploy-vodafone" depends="">
		<antcall target="deploy-as-sd">
			<param name="project.name" value="91" />
		</antcall>
	</target>

	<target name="deploy-all" depends="clean-all, compile, deploy-optimus, deploy-tmn, deploy-vodafone" description="Deploy all web services">
	</target>

	<target name="undeploy-vodafone" description="Undeploy from JBoss AS">
		<fail unless="jboss.home">project.jboss.home not set</fail>
		<delete file="${deploy.dir}/91.war" />
	</target>
	<target name="undeploy-optimus" description="Undeploy from JBoss AS">
		<fail unless="jboss.home">project.jboss.home not set</fail>
		<delete file="${deploy.dir}/93.war" />
	</target>
	<target name="undeploy-tmn" description="Undeploy from JBoss AS">
		<fail unless="jboss.home">project.jboss.home not set</fail>
		<delete file="${deploy.dir}/96.war" />
	</target>

	<target name="undeploy-all" depends="undeploy-vodafone, undeploy-optimus, undeploy-tmn" description="Undeploy all from JBoss AS">
		<fail unless="jboss.home">project.jbss.home not set</fail>
	</target>

	<target name="test-es" depends="compile-tests" description="Run the tests">
		<echo message="Testing all services..." />
		<junit>
			<classpath refid="project.classpath" />
			<formatter type="brief" usefile="false" />
			<test name="pt.ist.anacom.service.test.CreateOperatorServiceTest" />
			<test name="pt.ist.anacom.service.test.IncreasePhoneBalanceServiceTest" />
			<test name="pt.ist.anacom.service.test.SendSMSServiceTest" />
			<test name="pt.ist.anacom.service.test.GetPhoneReceivedSMSListServiceTest" />
			<test name="pt.ist.anacom.service.test.GetLastMadeCommunicationInfoServiceTest" />
		</junit>
	</target>

	<target name="test-sd" depends="compile-tests" description="Run the tests">
		<echo message="Testing all services..." />
		<junit>
			<classpath refid="project.classpath" />
			<formatter type="brief" usefile="false" />
			<test name="anacom.presentation.CreateMobileTestSD" />
		</junit>
	</target>
	
	<target name="clean-all" depends="clean-src, clean-db" description="Cleans the compiled classes and generated sources">
	</target>

	<target name="clean-src" description="Cleans the compiled classes and generated sources">
		<delete dir="${build.rel-dir}" />
		<delete dir="${eclipse.build.rel-dir}" />
		<delete dir="${dist.rel-dir}" />
		<delete dir="${dml.jboss.rel-file}" />
	</target>

	<target name="clean-db" description="Cleans the compiled classes and generated sources">
		<delete dir="${test-db.rel-dir}" />
		<delete dir="${db.rel-dir}" />
		<delete dir="${db-optimus.rel-dir}" />
		<delete dir="${db-tmn.rel-dir}" />
		<delete dir="${db-vodafone.rel-dir}" />
	</target>

	<target name="run-remote" depends="compile" description="Runs the program with a remote application server">
		<java classname="pt.ist.anacom.presentationserver.PresentationServer" fork="true">
			<classpath>
				<path refid="project.classpath" />
			</classpath>
			<sysproperty key="server.type" value="ES+SD" />
		</java>
	</target>

	<target name="run-local" depends="compile" description="Runs the program with a local application server">
		<java classname="pt.ist.anacom.presentationserver.PresentationServer" fork="false">
			<classpath>
				<path refid="project.classpath" />
			</classpath>
			<sysproperty key="server.type" value="ES-only" />
		</java>
	</target>

	<target name="gwtc" depends="compile" description="GWT compile to JavaScript (production mode)">
		<java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
			<classpath>
				<pathelement location="${java.src.rel-dir}" />
				<path refid="project.classpath" />
			</classpath>
			<!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
			<jvmarg value="-Xmx256M" />
			<arg line="-war" />
			<arg value="${gwt.war.rel-dir}" />
			<!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
			<arg line="${gwt.args}" />
			<arg value="pt.ist.anacom.presentationserver.Anacom" />
		</java>
	</target>

	<target name="gwt-devmode" depends="compile">
		<echo message="Running GWT in devmode with URL='${startUpURL}'" />
		<mkdir dir="${gwt.war.classes.rel-dir}" />
		<copy todir="${gwt.war.classes.rel-dir}">
			<fileset dir="${classes.build.rel-dir}" includes="**/*.class" />
		</copy>
		<copy todir="${gwt.war.classes.rel-dir}">
			<fileset dir="${java.src.rel-dir}" excludes="**/*.java" />
		</copy>
		<copy todir="${gwt.war.classes.rel-dir}" file="log4j.properties" />
		<copy todir="${gwt.war.lib.rel-dir}" flatten="yes">
			<fileset dir="${jboss.home}" includes="**/cxf-*.jar" />
		</copy>
		<java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
			<classpath>
				<path refid="project.classpath" />
				<pathelement location="${java.src.rel-dir}" />
			</classpath>
			<jvmarg value="-Xmx256M" />
			<arg value="-startupUrl" />
			<arg value="${startUpURL}" />
			<arg line="-war" />
			<arg value="${gwt.war.rel-dir}" />
			<!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
			<arg line="${gwt.args}" />
			<arg value="pt.ist.anacom.presentationserver.Anacom" />
		</java>
	</target>

	<target name="devmode-es" description="Runs GWT in development mode with Software Engineering configuration">
		<antcall target="gwt-devmode">
			<param name="startUpURL" value="index.html" />
		</antcall>
	</target>

	<target name="devmode-sd" description="Runs GWT in development mode with Distributed Systems configuration">
		<antcall target="gwt-devmode">
			<param name="startUpURL" value="remote.html" />
		</antcall>
	</target>

	<target name="print-env-vars" description="Prints all environment variables">
		<propertyset id="environment">
			<propertyref prefix="env." />
		</propertyset>
		<property name="env_prop" refid="environment" />
		<echo>${env_prop}</echo>
	</target>

</project>
