<?xml version="1.0" encoding="UTF-8"?>

<!-- Tips: - Colocar sempre <elements> para cada <part> - minOccurs="0" (opcional) 
	default=1 - maxOccurs="unbounded" (cria uma lista) -->

<definitions name="anacom" targetNamespace="http://pt.ist.anacom.essd.0403"
	xmlns:tns="http://pt.ist.anacom.essd.0403" xmlns="http://schemas.xmlsoap.org/wsdl/"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">

	<!-- * * ************** TYPES ************** * -->

	<types>
		<xsd:schema elementFormDefault="qualified"
			targetNamespace="http://pt.ist.anacom.essd.0403">

			<xsd:complexType name="Void">
				<xsd:sequence />
			</xsd:complexType>

			<xsd:complexType name="OperatorPrefixType">
				<xsd:sequence>
					<xsd:element name="operatorPrefix" type="xsd:string" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="OperatorNameAndPrefixType">
				<xsd:sequence>
					<xsd:element name="operatorName" type="xsd:string" />
					<xsd:element name="operatorPrefix" type="xsd:string" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="OperatorDetailedType">
				<xsd:sequence>
					<xsd:element name="operatorPrefix" type="xsd:string" />
					<xsd:element name="operatorName" type="xsd:string" />
					<xsd:element name="tax" type="xsd:int" />
					<xsd:element name="taxVoice" type="xsd:int" />
					<xsd:element name="taxSMS" type="xsd:int" />
					<xsd:element name="taxVideo" type="xsd:int" />
					<xsd:element name="taxBonus" type="xsd:int" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="PhoneNumberType">
				<xsd:sequence>
					<xsd:element name="phoneNumber" type="xsd:string" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="PhoneDetailedType">
				<xsd:sequence>
					<xsd:element name="operatorPrefix" type="xsd:string" />
					<xsd:element name="phoneNumber" type="xsd:string" />
					<xsd:element name="phoneGen" type="xsd:int" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="PhoneStateType">
				<xsd:sequence>
					<xsd:element name="phoneState" type="xsd:int" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="PhoneNumberAndStateType">
				<xsd:sequence>
					<xsd:element name="phoneNumber" type="xsd:string" />
					<xsd:element name="phoneState" type="xsd:int" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="PhonePrefixDoesNotMatchExceptionType">
				<xsd:sequence>
					<xsd:element name="operatorName" type="xsd:string" />
					<xsd:element name="operatorPrefix" type="xsd:string" />
					<xsd:element name="phonePrefix" type="xsd:string" />
					<xsd:element name="phoneNumber" type="xsd:string" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="BalanceType">
				<xsd:sequence>
					<xsd:element name="balanceValue" type="xsd:int" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="BalanceAndPhoneNumberType">
				<xsd:sequence>
					<xsd:element name="phoneNumber" type="xsd:string" />
					<xsd:element name="balanceValue" type="xsd:int" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="BalanceAndPhoneNumberListType">
				<xsd:sequence>
					<xsd:element name="phoneList" type="tns:BalanceAndPhoneNumberType"
						minOccurs="0" maxOccurs="unbounded" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="SMSType">
				<xsd:sequence>
					<xsd:element name="sourcePhoneNumber" type="xsd:string" />
					<xsd:element name="destinationPhoneNumber" type="xsd:string" />
					<xsd:element name="message" type="xsd:string" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="SMSPhoneReceivedListType">
				<xsd:sequence>
					<xsd:element name="smsList" type="tns:SMSType"
						minOccurs="0" maxOccurs="unbounded" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="CommunicationType">
				<xsd:sequence>
					<xsd:element name="destinationPhoneNumber" type="xsd:string" />
					<xsd:element name="type" type="xsd:int" />
					<xsd:element name="length" type="xsd:int" />
					<xsd:element name="cost" type="xsd:int" />
				</xsd:sequence>
			</xsd:complexType>

			<!-- OPERATIONS ELEMENTS -->
			<xsd:element name="registerOperatorInputElement" type="tns:OperatorDetailedType" />

			<xsd:element name="registerPhoneInputElement" type="tns:PhoneDetailedType" />

			<xsd:element name="increasePhoneBalanceElement" type="tns:BalanceAndPhoneNumberType" />

			<xsd:element name="cancelRegisterPhoneInputElement" type="tns:PhoneNumberType" />

			<xsd:element name="setPhoneStateInputElement" type="tns:PhoneNumberAndStateType" />

			<xsd:element name="getPhoneStateInputElement" type="tns:PhoneNumberType" />

			<xsd:element name="getPhoneStateOutputElement" type="tns:PhoneStateType" />

			<xsd:element name="getPhoneBalanceInputElement" type="tns:PhoneNumberType" />

			<xsd:element name="getPhoneBalanceOutputElement" type="tns:BalanceType" />

			<xsd:element name="getBalanceAndPhoneListInputElement"
				type="tns:OperatorPrefixType" />

			<xsd:element name="getBalanceAndPhoneListOutputElement"
				type="tns:BalanceAndPhoneNumberListType" />

			<xsd:element name="getLastMadeCommunicationInputElement"
				type="tns:PhoneNumberType" />

			<xsd:element name="getLastMadeCommunicationOutputElement"
				type="tns:CommunicationType" />

			<xsd:element name="sendSMSInputElement" type="tns:SMSType" />

			<xsd:element name="getSMSPhoneReceivedListInputElement"
				type="tns:PhoneNumberType" />

			<xsd:element name="getSMSPhoneReceivedListOutputElement"
				type="tns:SMSPhoneReceivedListType" />


			<!-- EXCEPTIONS ELEMENTS -->

			<xsd:element name="OperatorPrefixAlreadyExistsRemoteExceptionElement"
				type="tns:OperatorPrefixType" />

			<xsd:element name="OperatorNullNameRemoteExceptionElement"
				type="tns:OperatorPrefixType" />

			<xsd:element name="OperatorWithWrongPrefixRemoteExceptionElement"
				type="tns:OperatorNameAndPrefixType" />

			<xsd:element name="PhonePrefixDoesNotMatchRemoteExceptionElement"
				type="tns:PhonePrefixDoesNotMatchExceptionType" />

			<xsd:element name="PhoneAlreadyExistsRemoteExceptionElement"
				type="tns:PhoneNumberType" />

			<xsd:element name="OperatorPrefixDoesNotExistRemoteExceptionElement"
				type="tns:OperatorPrefixType" />

			<xsd:element name="PhoneNumberIncorrectRemoteExceptionElement"
				type="tns:PhoneNumberType" />

			<xsd:element name="NoSuchPhoneRemoteExceptionElement"
				type="tns:PhoneNumberType" />

			<xsd:element name="InsuficientBalanceRemoteExceptionElement"
				type="tns:BalanceAndPhoneNumberType" />

			<xsd:element name="NegativeBalanceRemoteExceptionElement"
				type="tns:PhoneNumberType" />

			<xsd:element name="BalanceLimitExceededRemoteExceptionElement"
				type="tns:BalanceAndPhoneNumberType" />

			<xsd:element name="NoCommunicationsMadeYetRemoteExceptionElement"
				type="tns:PhoneNumberType" />

			<xsd:element name="SMSInvalidTextRemoteExceptionElement"
				type="tns:Void" />

			<xsd:element name="PhoneIsBUSYRemoteExceptionElement"
				type="tns:PhoneNumberType" />

			<xsd:element name="PhoneIsOFFRemoteExceptionElement"
				type="tns:PhoneNumberType" />

			<xsd:element name="InvalidTaxRemoteExceptionElement"
				type="tns:Void" />

		</xsd:schema>
	</types>

	<!-- **************** MESSAGES *************** -->

	<!-- Void Return -->
	<message name="empty" />

	<!-- Exceptions -->

	<message name="OperatorPrefixAlreadyExistsRemoteException">
		<part name="OperatorPrefixAlreadyExistsRemoteException"
			element="tns:OperatorPrefixAlreadyExistsRemoteExceptionElement" />
	</message>

	<message name="OperatorNullNameRemoteException">
		<part name="OperatorNullNameRemoteException" element="tns:OperatorNullNameRemoteExceptionElement" />
	</message>

	<message name="OperatorWithWrongPrefixRemoteException">
		<part name="OperatorWithWrongPrefixRemoteException" element="tns:OperatorWithWrongPrefixRemoteExceptionElement" />
	</message>

	<message name="PhonePrefixDoesNotMatchRemoteException">
		<part name="PhonePrefixDoesNotMatchRemoteException" element="tns:PhonePrefixDoesNotMatchRemoteExceptionElement" />
	</message>

	<message name="PhoneAlreadyExistsRemoteException">
		<part name="PhoneAlreadyExistsRemoteException" element="tns:PhoneAlreadyExistsRemoteExceptionElement" />
	</message>

	<message name="OperatorPrefixDoesNotExistRemoteException">
		<part name="OperatorPrefixDoesNotExistRemoteException" element="tns:OperatorPrefixDoesNotExistRemoteExceptionElement" />
	</message>

	<message name="PhoneNumberIncorrectRemoteException">
		<part name="PhoneNumberIncorrectRemoteException" element="tns:PhoneNumberIncorrectRemoteExceptionElement" />
	</message>

	<message name="InsuficientBalanceRemoteException">
		<part name="InsuficientBalanceRemoteException" element="tns:InsuficientBalanceRemoteExceptionElement" />
	</message>

	<message name="NegativeBalanceRemoteException">
		<part name="NegativeBalanceRemoteException" element="tns:NegativeBalanceRemoteExceptionElement" />
	</message>

	<message name="BalanceLimitExceededRemoteException">
		<part name="BalanceLimitExceededRemoteException" element="tns:BalanceLimitExceededRemoteExceptionElement" />
	</message>

	<message name="NoSuchPhoneRemoteException">
		<part name="NoSuchPhoneRemoteException" element="tns:NoSuchPhoneRemoteExceptionElement" />
	</message>

	<message name="NoCommunicationsMadeYetRemoteException">
		<part name="NoCommunicationsMadeYetRemoteException" element="tns:NoCommunicationsMadeYetRemoteExceptionElement" />
	</message>

	<message name="SMSInvalidTextRemoteException">
		<part name="SMSInvalidTextRemoteException" element="tns:SMSInvalidTextRemoteExceptionElement" />
	</message>
	
	<message name="PhoneIsOFFRemoteException">
		<part name="PhoneIsOFFRemoteException" element="tns:PhoneIsOFFRemoteExceptionElement" />
	</message>
	
	<message name="PhoneIsBUSYRemoteException">
		<part name="PhoneIsBUSYRemoteException" element="tns:PhoneIsBUSYRemoteExceptionElement" />
	</message>

	<message name="InvalidTaxRemoteException">
		<part name="InvalidTaxRemoteException" element="tns:InvalidTaxRemoteExceptionElement" />
	</message>

	<!-- Register Operator -->
	<message name="registerOperatorInput">
		<part name="registerOperatorInput" element="tns:registerOperatorInputElement" />
	</message>

	<!-- Register Phone -->
	<message name="registerPhoneInput">
		<part name="registerPhoneInput" element="tns:registerPhoneInputElement" />
	</message>

	<!-- Increase Phone Balance -->
	<message name="increasePhoneBalanceInput">
		<part name="increasePhoneBalanceInput" element="tns:increasePhoneBalanceElement" />
	</message>

	<!-- Cancel Register Phone -->
	<message name="cancelRegisterPhoneInput">
		<part name="cancelRegisterPhoneInput" element="tns:cancelRegisterPhoneInputElement" />
	</message>

	<!-- Set Phone State -->
	<message name="setPhoneStateInput">
		<part name="setPhoneStateInput" element="tns:setPhoneStateInputElement" />
	</message>

	<!-- Get Phone State -->
	<message name="getPhoneStateInput">
		<part name="getPhoneStateInput" element="tns:getPhoneStateInputElement" />
	</message>

	<message name="getPhoneStateOutput">
		<part name="getPhoneStateOutput" element="tns:getPhoneStateOutputElement" />
	</message>

	<!-- Get Phone Balance -->
	<message name="getPhoneBalanceInput">
		<part name="getPhoneBalanceInput" element="tns:getPhoneBalanceInputElement" />
	</message>

	<message name="getPhoneBalanceOutput">
		<part name="getPhoneBalanceOutput" element="tns:getPhoneBalanceOutputElement" />
	</message>

	<!-- Get Phones and Balance List -->
	<message name="getBalanceAndPhoneListInput">
		<part name="getBalanceAndPhoneListInput" element="tns:getBalanceAndPhoneListInputElement" />
	</message>

	<message name="getBalanceAndPhoneListOutput">
		<part name="getBalanceAndPhoneListOutput" element="tns:getBalanceAndPhoneListOutputElement" />
	</message>

	<!-- Get Last Made Communication -->
	<message name="getLastMadeCommunicationInput">
		<part name="getLastMadeCommunicationInput" element="tns:getLastMadeCommunicationInputElement" />
	</message>

	<message name="getLastMadeCommunicationOutput">
		<part name="getLastMadeCommunicationOutput" element="tns:getLastMadeCommunicationOutputElement" />
	</message>

	<!-- send SMS -->
	<message name="sendSMSInput">
		<part name="sendSMSInput" element="tns:sendSMSInputElement" />
	</message>

	<!-- Get SMS Received List -->
	<message name="getSMSPhoneReceivedListInput">
		<part name="getSMSPhoneReceivedListInput" element="tns:getSMSPhoneReceivedListInputElement" />
	</message>

	<message name="getSMSPhoneReceivedListOutput">
		<part name="getSMSPhoneReceivedListOutput" element="tns:getSMSPhoneReceivedListOutputElement" />
	</message>


	<!-- * * ************** PORTS ************** * -->

	<portType name="AnacomPortType">

		<operation name="registerOperator">
			<input name="registerOperatorInput" message="tns:registerOperatorInput" />
			<output name="registerOperatorOutput" message="tns:empty" />
			<fault name="OperatorPrefixAlreadyExistsRemoteException"
				message="tns:OperatorPrefixAlreadyExistsRemoteException" />
			<fault name="OperatorWithWrongPrefixRemoteException" message="tns:OperatorWithWrongPrefixRemoteException" />
			<fault name="OperatorNullNameRemoteException" message="tns:OperatorNullNameRemoteException" />
			<fault name="InvalidTaxRemoteException" message="tns:InvalidTaxRemoteException" />
		</operation>

		<operation name="registerPhone">
			<input name="registerPhoneInput" message="tns:registerPhoneInput" />
			<output name="registerPhoneOutput" message="tns:empty" />
			<fault name="PhonePrefixDoesNotMatchRemoteException" message="tns:PhonePrefixDoesNotMatchRemoteException" />
			<fault name="PhoneAlreadyExistsRemoteException" message="tns:PhoneAlreadyExistsRemoteException" />
			<fault name="OperatorPrefixDoesNotExistRemoteException"
				message="tns:OperatorPrefixDoesNotExistRemoteException" />
			<fault name="PhoneNumberIncorrectRemoteException" message="tns:PhoneNumberIncorrectRemoteException" />
		</operation>

		<operation name="increasePhoneBalance">
			<input name="increasePhoneBalanceInput" message="tns:increasePhoneBalanceInput" />
			<output name="increasePhoneBalanceOutput" message="tns:empty" />
			<fault name="NegativeBalanceRemoteException" message="tns:NegativeBalanceRemoteException" />
			<fault name="BalanceLimitExceededRemoteException" message="tns:BalanceLimitExceededRemoteException" />
			<fault name="NoSuchPhoneRemoteException" message="tns:NoSuchPhoneRemoteException" />
			<fault name="OperatorPrefixDoesNotExistRemoteException"
				message="tns:OperatorPrefixDoesNotExistRemoteException" />
		</operation>

		<operation name="cancelRegisterPhone">
			<input name="cancelRegisterPhoneInput" message="tns:cancelRegisterPhoneInput" />
			<output name="cancelRegisterPhoneOutput" message="tns:empty" />
			<fault name="OperatorPrefixDoesNotExistRemoteException"
				message="tns:OperatorPrefixDoesNotExistRemoteException" />
			<fault name="NoSuchPhoneRemoteException" message="tns:NoSuchPhoneRemoteException" />
		</operation>

		<operation name="setPhoneState">
			<input name="setPhoneStateInput" message="tns:setPhoneStateInput" />
			<output name="setPhoneStateOutput" message="tns:empty" />
			<fault name="OperatorPrefixDoesNotExistRemoteException"
				message="tns:OperatorPrefixDoesNotExistRemoteException" />
			<fault name="NoSuchPhoneRemoteException" message="tns:NoSuchPhoneRemoteException" />
		</operation>

		<operation name="getPhoneState">
			<input name="getPhoneStateInput" message="tns:getPhoneStateInput" />
			<output name="getPhoneStateOutput" message="tns:getPhoneStateOutput" />
			<fault name="OperatorPrefixDoesNotExistRemoteException"
				message="tns:OperatorPrefixDoesNotExistRemoteException" />
			<fault name="NoSuchPhoneRemoteException" message="tns:NoSuchPhoneRemoteException" />
		</operation>

		<operation name="getPhoneBalance">
			<input name="getPhoneBalanceInput" message="tns:getPhoneBalanceInput" />
			<output name="getPhoneBalanceOutput" message="tns:getPhoneBalanceOutput" />
			<fault name="OperatorPrefixDoesNotExistRemoteException"
				message="tns:OperatorPrefixDoesNotExistRemoteException" />
			<fault name="NoSuchPhoneRemoteException" message="tns:NoSuchPhoneRemoteException" />
		</operation>

		<operation name="getBalanceAndPhoneList">
			<input name="getBalanceAndPhoneListInput" message="tns:getBalanceAndPhoneListInput" />
			<output name="getBalanceAndPhoneListOutput" message="tns:getBalanceAndPhoneListOutput" />
			<fault name="OperatorPrefixDoesNotExistRemoteException"
				message="tns:OperatorPrefixDoesNotExistRemoteException" />
		</operation>

		<operation name="getLastMadeCommunication">
			<input name="getLastMadeCommunicationInput" message="tns:getLastMadeCommunicationInput" />
			<output name="getLastMadeCommunicationOutput" message="tns:getLastMadeCommunicationOutput" />
			<fault name="OperatorPrefixDoesNotExistRemoteException"
				message="tns:OperatorPrefixDoesNotExistRemoteException" />
			<fault name="NoSuchPhoneRemoteException" message="tns:NoSuchPhoneRemoteException" />
			<fault name="NoCommunicationsMadeYetRemoteException" message="tns:NoCommunicationsMadeYetRemoteException" />
		</operation>

		<operation name="sendSMS">
			<input name="sendSMSInput" message="tns:sendSMSInput" />
			<output name="sendSMSOutput" message="tns:empty" />
			<fault name="OperatorPrefixDoesNotExistRemoteException"
				message="tns:OperatorPrefixDoesNotExistRemoteException" />
			<fault name="NoSuchPhoneRemoteException" message="tns:NoSuchPhoneRemoteException" />
			<fault name="NegativeBalanceRemoteException" message="tns:NegativeBalanceRemoteException" />
			<fault name="InsuficientBalanceRemoteException" message="tns:InsuficientBalanceRemoteException" />
			<fault name="SMSInvalidTextRemoteException" message="tns:SMSInvalidTextRemoteException" />
			<fault name="PhoneIsOFFRemoteException" message="tns:PhoneIsOFFRemoteException" />
			<fault name="PhoneIsBUSYRemoteException" message="tns:PhoneIsBUSYRemoteException" />
		</operation>

		<operation name="getSMSPhoneReceivedList">
			<input name="getSMSPhoneReceivedListInput" message="tns:getSMSPhoneReceivedListInput" />
			<output name="getSMSPhoneReceivedListOutput" message="tns:getSMSPhoneReceivedListOutput" />
			<fault name="OperatorPrefixDoesNotExistRemoteException"
				message="tns:OperatorPrefixDoesNotExistRemoteException" />
			<fault name="NoSuchPhoneRemoteException" message="tns:NoSuchPhoneRemoteException" />
		</operation>

	</portType>

	<!-- * * ************** BINDING ************** * -->

	<binding name="AnacomBinding" type="tns:AnacomPortType">

		<soap:binding transport="http://schemas.xmlsoap.org/soap/http"
			style="document" />

		<!-- OPERATIONS -->
		<operation name="registerOperator">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<fault name="OperatorPrefixAlreadyExistsRemoteException">
				<soap:fault use="literal"
					name="OperatorPrefixAlreadyExistsRemoteException" />
			</fault>
			<fault name="OperatorWithWrongPrefixRemoteException">
				<soap:fault use="literal" name="OperatorWithWrongPrefixRemoteException" />
			</fault>
			<fault name="OperatorNullNameRemoteException">
				<soap:fault use="literal" name="OperatorNullNameRemoteException" />
			</fault>
			<fault name="InvalidTaxRemoteException">
				<soap:fault use="literal" name="InvalidTaxRemoteException" />
			</fault>
		</operation>

		<operation name="registerPhone">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<fault name="PhonePrefixDoesNotMatchRemoteException">
				<soap:fault use="literal" name="PhonePrefixDoesNotMatchRemoteException" />
			</fault>
			<fault name="PhoneAlreadyExistsRemoteException">
				<soap:fault use="literal" name="PhoneAlreadyExistsRemoteException" />
			</fault>
			<fault name="OperatorPrefixDoesNotExistRemoteException">
				<soap:fault use="literal"
					name="OperatorPrefixDoesNotExistRemoteException" />
			</fault>
			<fault name="PhoneNumberIncorrectRemoteException">
				<soap:fault use="literal" name="PhoneNumberIncorrectRemoteException" />
			</fault>
		</operation>

		<operation name="increasePhoneBalance">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<fault name="NegativeBalanceRemoteException">
				<soap:fault use="literal" name="NegativeBalanceRemoteException" />
			</fault>
			<fault name="BalanceLimitExceededRemoteException">
				<soap:fault use="literal" name="BalanceLimitExceededRemoteException" />
			</fault>
			<fault name="NoSuchPhoneRemoteException">
				<soap:fault use="literal" name="NoSuchPhoneRemoteException" />
			</fault>
			<fault name="OperatorPrefixDoesNotExistRemoteException">
				<soap:fault use="literal"
					name="OperatorPrefixDoesNotExistRemoteException" />
			</fault>
		</operation>

		<operation name="cancelRegisterPhone">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<fault name="NoSuchPhoneRemoteException">
				<soap:fault use="literal" name="NoSuchPhoneRemoteException" />
			</fault>
			<fault name="OperatorPrefixDoesNotExistRemoteException">
				<soap:fault use="literal"
					name="OperatorPrefixDoesNotExistRemoteException" />
			</fault>
		</operation>

		<operation name="setPhoneState">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<fault name="NoSuchPhoneRemoteException">
				<soap:fault use="literal" name="NoSuchPhoneRemoteException" />
			</fault>
			<fault name="OperatorPrefixDoesNotExistRemoteException">
				<soap:fault use="literal"
					name="OperatorPrefixDoesNotExistRemoteException" />
			</fault>
		</operation>

		<operation name="getPhoneState">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="NoSuchPhoneRemoteException">
				<soap:fault use="literal" name="NoSuchPhoneRemoteException" />
			</fault>
			<fault name="OperatorPrefixDoesNotExistRemoteException">
				<soap:fault use="literal"
					name="OperatorPrefixDoesNotExistRemoteException" />
			</fault>
		</operation>

		<operation name="getPhoneBalance">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="NoSuchPhoneRemoteException">
				<soap:fault use="literal" name="NoSuchPhoneRemoteException" />
			</fault>
			<fault name="OperatorPrefixDoesNotExistRemoteException">
				<soap:fault use="literal"
					name="OperatorPrefixDoesNotExistRemoteException" />
			</fault>
		</operation>

		<operation name="getBalanceAndPhoneList">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="OperatorPrefixDoesNotExistRemoteException">
				<soap:fault use="literal"
					name="OperatorPrefixDoesNotExistRemoteException" />
			</fault>
		</operation>

		<operation name="getLastMadeCommunication">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="OperatorPrefixDoesNotExistRemoteException">
				<soap:fault use="literal"
					name="OperatorPrefixDoesNotExistRemoteException" />
			</fault>
			<fault name="NoSuchPhoneRemoteException">
				<soap:fault use="literal" name="NoSuchPhoneRemoteException" />
			</fault>
			<fault name="NoCommunicationsMadeYetRemoteException">
				<soap:fault use="literal" name="NoCommunicationsMadeYetRemoteException" />
			</fault>
		</operation>

		<operation name="sendSMS">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<fault name="NoSuchPhoneRemoteException">
				<soap:fault use="literal" name="NoSuchPhoneRemoteException" />
			</fault>
			<fault name="OperatorPrefixDoesNotExistRemoteException">
				<soap:fault use="literal"
					name="OperatorPrefixDoesNotExistRemoteException" />
			</fault>
			<fault name="NegativeBalanceRemoteException">
				<soap:fault use="literal" name="NegativeBalanceRemoteException" />
			</fault>
			<fault name="SMSInvalidTextRemoteException">
				<soap:fault use="literal" name="SMSInvalidTextRemoteException" />
			</fault>
			<fault name="InsuficientBalanceRemoteException">
				<soap:fault use="literal" name="InsuficientBalanceRemoteException" />
			</fault>
			<fault name="PhoneIsOFFRemoteException">
				<soap:fault use="literal" name="PhoneIsOFFRemoteException"/>
			</fault>
			<fault name="PhoneIsBUSYRemoteException">
				<soap:fault use="literal" name="PhoneIsBUSYRemoteException"/>
			</fault>
		</operation>

		<operation name="getSMSPhoneReceivedList">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="NoSuchPhoneRemoteException">
				<soap:fault use="literal" name="NoSuchPhoneRemoteException" />
			</fault>
			<fault name="OperatorPrefixDoesNotExistRemoteException">
				<soap:fault use="literal"
					name="OperatorPrefixDoesNotExistRemoteException" />
			</fault>
		</operation>

	</binding>

	<!-- **************** SERVICES *************** -->

	<service name="AnacomService">
		<port name="AnacomPort" binding="tns:AnacomBinding">
			<soap:address location="http://localhost:8080/anacom-as/AnacomService" />
		</port>
	</service>

</definitions>